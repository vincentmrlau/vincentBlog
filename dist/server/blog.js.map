{"version":3,"sources":["../../server/blog.js"],"names":["express","require","mysql","config","router","Router","connection","createConnection","mysqlConfig","connect","get","req","res","next","sqlClass","query","class","searchBlogByClass","err","result","console","log","json","code","length","searchId","data","id","blog_id","dataStore","blogId","i","indexOf","push","tag_id","k","comment_count","title","picture","href","post","body","content","email","nickname","insertComment","searchComment","module","exports"],"mappings":";;AAEA,IAAIA,UAAUC,QAAQ,SAAR,CAAd;AACA,IAAIC,QAAQD,QAAQ,OAAR,CAAZ;AACA,IAAIE,SAASF,QAAQ,iBAAR,CAAb;;AAEA,IAAIG,SAASJ,QAAQK,MAAR,EAAb;;AAEA,IAAIC,aAAaJ,MAAMK,gBAAN,CAAuBJ,OAAOK,WAA9B,CAAjB;AACAF,WAAWG,OAAX;;AAGAL,OAAOM,GAAP,CAAW,aAAX,EAAyB,UAAUC,GAAV,EAAcC,GAAd,EAAkBC,IAAlB,EAAwB;;AAE7C,QAAIC,WAAWH,IAAII,KAAJ,CAAUC,KAAzB;AACA,QAAGF,QAAH,EAAY;AACR,YAAIG,oBAAoB,0BACpB,6CADoB,GAEpB,2HAFoB,GAGpB,kBAHoB,GAGDH,QAHC,GAGQ,GAHhC;;AAKAR,mBAAWS,KAAX,CAAiBE,iBAAjB,EAAmC,UAAUC,GAAV,EAAcC,MAAd,EAAsB;AACrD,gBAAGD,GAAH,EAAO;AACHE,wBAAQC,GAAR,CAAYH,GAAZ;AACAN,oBAAIU,IAAJ,CAAS;AACLC,0BAAK;AADA,iBAAT;AAGH,aALD,MAKM;AACFH,wBAAQC,GAAR,CAAYF,MAAZ;AACA,oBAAIA,OAAOK,MAAP,IAAiB,CAArB,EAAuB;AACnBZ,wBAAIU,IAAJ,CAAS;AACLC,8BAAK;AADA,qBAAT;AAGH,iBAJD,MAIM;AAWF;AAXE,wBAYOE,QAZP,GAYF,SAASA,QAAT,CAAkBC,IAAlB,EAAyBC,EAAzB,EAA6B;AACzB,+BAAOD,KAAKE,OAAL,IAAgBD,EAAvB;AACH,qBAdC;;AAEF,wBAAIE,YAAY,EAAhB;AACA,wBAAIC,SAAS,EAAb;AACA,yBAAI,IAAIC,IAAI,CAAZ,EAAcA,IAAEZ,OAAOK,MAAvB,EAA8BO,GAA9B,EAAkC;AAC9B,4BAAGD,OAAOE,OAAP,CAAeb,OAAOY,CAAP,EAAUH,OAAzB,KAAmC,CAAtC,EAAwC,CAEvC,CAFD,MAEM;AACFE,mCAAOG,IAAP,CAAYd,OAAOY,CAAP,EAAUH,OAAtB;AACH;AACJ;AAKD,yBAAI,IAAIG,IAAI,CAAZ,EAAcA,IAAED,OAAON,MAAvB,EAA8BO,GAA9B,EAAkC;AAC9BF,kCAAUI,IAAV,CAAe;AACXC,oCAAO;AADI,yBAAf;AAGA,6BAAI,IAAIC,IAAI,CAAZ,EAAcA,IAAEhB,OAAOK,MAAvB,EAA8BW,GAA9B,EAAkC;AAC9B,gCAAGhB,OAAOgB,CAAP,EAAUP,OAAV,IAAqBE,OAAOC,CAAP,CAAxB,EAAkC;AAC9BF,0CAAUE,CAAV,EAAaH,OAAb,GAAsBT,OAAOgB,CAAP,EAAUP,OAAhC;AACAC,0CAAUE,CAAV,EAAaK,aAAb,GAA4BjB,OAAOgB,CAAP,EAAUC,aAAV,IAAyB,CAArD;AACAP,0CAAUE,CAAV,EAAaM,KAAb,GAAoBlB,OAAOgB,CAAP,EAAUE,KAA9B;AACAR,0CAAUE,CAAV,EAAaO,OAAb,GAAsBnB,OAAOgB,CAAP,EAAUG,OAAhC;AACAT,0CAAUE,CAAV,EAAaQ,IAAb,GAAmBpB,OAAOgB,CAAP,EAAUI,IAA7B;AACAV,0CAAUE,CAAV,EAAaG,MAAb,CAAoBD,IAApB,CAAyBd,OAAOgB,CAAP,EAAUD,MAAnC;AACH;AACJ;AACJ;AACD;AACAtB,wBAAIU,IAAJ,CAAS;AACL,gCAAO,SADF;AAEL,gCAAOO;AAFF,qBAAT;AAIH;AACJ;AACJ,SAjDD;AAkDH,KAxDD,MAwDM;AACFjB,YAAIU,IAAJ,CAAS;AACLC,kBAAK;AADA,SAAT;AAGH;AACJ,CAhED;;AAkEAnB,OAAOoC,IAAP,CAAY,aAAZ,EAA0B,UAAU7B,GAAV,EAAcC,GAAd,EAAkBC,IAAlB,EAAwB;AAC9CO,YAAQC,GAAR,CAAYV,IAAI8B,IAAhB;AACA,QAAIC,UAAU/B,IAAI8B,IAAJ,CAASC,OAAvB;AACA,QAAIC,QAAQhC,IAAI8B,IAAJ,CAASE,KAArB;AACA,QAAIf,UAAUjB,IAAI8B,IAAJ,CAASb,OAAvB;AACA,QAAIgB,WAAWjC,IAAI8B,IAAJ,CAASG,QAAxB;;AAEA,QAAIF,WAASC,KAAT,IAAgBf,OAAhB,IAAyBgB,QAA7B,EAAsC;AAClC;AACA,YAAIC,gBAAgB,gEAChB,IADgB,GACVjB,OADU,GACD,KADC,GAEhB,IAFgB,GAEVe,KAFU,GAEH,KAFG,GAGhB,IAHgB,GAGVC,QAHU,GAGA,KAHA,GAIhB,IAJgB,GAIVF,OAJU,GAID,IAJC,GAKhB,GALJ;AAMApC,mBAAWS,KAAX,CAAiB8B,aAAjB,EAA+B,UAAU3B,GAAV,EAAcC,MAAd,EAAsB;AACjD,gBAAGD,GAAH,EAAO;AACHE,wBAAQC,GAAR,CAAYH,GAAZ;AACAN,oBAAIU,IAAJ,CAAS;AACLC,0BAAK;AADA,iBAAT;AAGH,aALD,MAKM;AACFH,wBAAQC,GAAR,CAAYF,MAAZ;AACA,oBAAI2B,gBAAgB,2CAChBlB,OADgB,GACN,IADd;AAEAtB,2BAAWS,KAAX,CAAiB+B,aAAjB,EAA+B,UAAU5B,GAAV,EAAcC,MAAd,EAAsB;AACjD,wBAAGD,GAAH,EAAO;AACHE,gCAAQC,GAAR,CAAYH,GAAZ;AACAN,4BAAIU,IAAJ,CAAS;AACLC,kCAAK;AADA,yBAAT;AAGH,qBALD,MAKM;AACFH,gCAAQC,GAAR,CAAYF,MAAZ;AACA,4BAAIA,OAAOK,MAAP,IAAiB,CAArB,EAAuB;AACnBZ,gCAAIU,IAAJ,CAAS;AACLC,sCAAK;AADA,6BAAT;AAGH,yBAJD,MAIM;AACFX,gCAAIU,IAAJ,CAAS;AACLC,sCAAK,SADA;AAELG,sCAAKP;AAFA,6BAAT;AAIH;AACJ;AACJ,iBAnBD;AAoBH;AACJ,SA/BD;AAgCH,KAxCD,MAwCM;AACFP,YAAIU,IAAJ,CAAS;AACLC,kBAAK;AADA,SAAT;AAGH;AAEJ,CArDD;;AAuDAnB,OAAOM,GAAP,CAAW,mBAAX,EAA+B,UAASC,GAAT,EAAaC,GAAb,EAAiBC,IAAjB,EAAuB;AAClD,QAAIe,UAAUjB,IAAII,KAAJ,CAAUa,OAAxB;AACA,QAAGA,OAAH,EAAW;AACP,YAAIkB,gBAAgB,2CAChBlB,OADgB,GACN,IADd;AAEAtB,mBAAWS,KAAX,CAAiB+B,aAAjB,EAA+B,UAAU5B,GAAV,EAAcC,MAAd,EAAsB;AACjD,gBAAGD,GAAH,EAAO;AACHE,wBAAQC,GAAR,CAAYH,GAAZ;AACAN,oBAAIU,IAAJ,CAAS;AACLC,0BAAK;AADA,iBAAT;AAGH,aALD,MAKM;AACFH,wBAAQC,GAAR,CAAYF,MAAZ;AACA,oBAAIA,OAAOK,MAAP,IAAiB,CAArB,EAAuB;AACnBZ,wBAAIU,IAAJ,CAAS;AACLC,8BAAK;AADA,qBAAT;AAGH,iBAJD,MAIM;AACFX,wBAAIU,IAAJ,CAAS;AACLC,8BAAK,SADA;AAELG,8BAAKP;AAFA,qBAAT;AAIH;AACJ;AACJ,SAnBD;AAoBH,KAvBD,MAuBM;AACFP,YAAIU,IAAJ,CAAS;AACLC,kBAAK;AADA,SAAT;AAGH;AACJ,CA9BD;;AAgCAwB,OAAOC,OAAP,GAAiB5C,MAAjB","file":"blog.js","sourcesContent":["\r\n\r\nvar express = require('express');\r\nvar mysql = require('mysql');\r\nvar config = require(\"./app-config.js\");\r\n\r\nvar router = express.Router();\r\n\r\nvar connection = mysql.createConnection(config.mysqlConfig);\r\nconnection.connect();\r\n\r\n\r\nrouter.get('/getByClass',function (req,res,next) {\r\n\r\n    var sqlClass = req.query.class;\r\n    if(sqlClass){\r\n        var searchBlogByClass = 'select * from blog b ' +\r\n            'right join paper_tag p on b.id = p.blog_id ' +\r\n            'left join ( select blog_id as cBlog_id , count(id) as comment_count from comment group by blog_id) c on c.cBlog_id = b.id' +\r\n            ' where class = \"'+sqlClass+'\"';\r\n\r\n        connection.query(searchBlogByClass,function (err,result) {\r\n            if(err){\r\n                console.log(err);\r\n                res.json({\r\n                    code:'sqlerror'\r\n                });\r\n            }else {\r\n                console.log(result);\r\n                if (result.length == 0){\r\n                    res.json({\r\n                        code:'noBlog'\r\n                    });\r\n                }else {\r\n\r\n                    var dataStore = [];\r\n                    var blogId = [];\r\n                    for(var i = 0;i<result.length;i++){\r\n                        if(blogId.indexOf(result[i].blog_id)>=0){\r\n\r\n                        }else {\r\n                            blogId.push(result[i].blog_id);\r\n                        }\r\n                    }\r\n                    // console.log(blogId);\r\n                    function searchId(data , id) {\r\n                        return data.blog_id == id;\r\n                    }\r\n                    for(var i = 0;i<blogId.length;i++){\r\n                        dataStore.push({\r\n                            tag_id:[]\r\n                        });\r\n                        for(var k = 0;k<result.length;k++){\r\n                            if(result[k].blog_id == blogId[i]){\r\n                                dataStore[i].blog_id =result[k].blog_id;\r\n                                dataStore[i].comment_count =result[k].comment_count||0;\r\n                                dataStore[i].title =result[k].title;\r\n                                dataStore[i].picture =result[k].picture;\r\n                                dataStore[i].href =result[k].href;\r\n                                dataStore[i].tag_id.push(result[k].tag_id);\r\n                            }\r\n                        }\r\n                    }\r\n                    // console.log(dataStore);\r\n                    res.json({\r\n                        'code':'success',\r\n                        'data':dataStore\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    }else {\r\n        res.json({\r\n            code:'emptyClass'\r\n        });\r\n    }\r\n});\r\n\r\nrouter.post('/newComment',function (req,res,next) {\r\n    console.log(req.body);\r\n    var content = req.body.content;\r\n    var email = req.body.email;\r\n    var blog_id = req.body.blog_id;\r\n    var nickname = req.body.nickname;\r\n\r\n    if (content&&email&&blog_id&&nickname){\r\n        //insert query\r\n        var insertComment = 'insert into comment (blog_id,email,nickname,content) value(' +\r\n            '\\\"' +blog_id +'\\\",'+\r\n            '\\\"' +email +'\\\",'+\r\n            '\\\"' +nickname +'\\\",'+\r\n            '\\\"' +content +'\\\"'+\r\n            ')';\r\n        connection.query(insertComment,function (err,result) {\r\n            if(err){\r\n                console.log(err);\r\n                res.json({\r\n                    code:'sqlErr'\r\n                })\r\n            }else {\r\n                console.log(result);\r\n                var searchComment = 'select * from comment where blog_id=\\\"' +\r\n                    blog_id + '\\\"';\r\n                connection.query(searchComment,function (err,result) {\r\n                    if(err){\r\n                        console.log(err);\r\n                        res.json({\r\n                            code:\"sqlError\"\r\n                        });\r\n                    }else {\r\n                        console.log(result);\r\n                        if (result.length == 0){\r\n                            res.json({\r\n                                code:'noComment'\r\n                            });\r\n                        }else {\r\n                            res.json({\r\n                                code:'success',\r\n                                data:result\r\n                            });\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        })\r\n    }else {\r\n        res.json({\r\n            code:'noParas'\r\n        });\r\n    }\r\n\r\n});\r\n\r\nrouter.get('/commentsByBlogId',function(req,res,next) {\r\n    var blog_id = req.query.blog_id;\r\n    if(blog_id){\r\n        var searchComment = 'select * from comment where blog_id=\\\"' +\r\n            blog_id + '\\\"';\r\n        connection.query(searchComment,function (err,result) {\r\n            if(err){\r\n                console.log(err);\r\n                res.json({\r\n                    code:\"sqlError\"\r\n                });\r\n            }else {\r\n                console.log(result);\r\n                if (result.length == 0){\r\n                    res.json({\r\n                        code:'noComment'\r\n                    });\r\n                }else {\r\n                    res.json({\r\n                        code:'success',\r\n                        data:result\r\n                    });\r\n                }\r\n            }\r\n        })\r\n    }else {\r\n        res.json({\r\n            code:'noParas'\r\n        });\r\n    }\r\n});\r\n\r\nmodule.exports = router;"]}