{"version":3,"sources":["../../../../../../client/static/flames/bootstrap-3.3.0/grunt/bs-raw-files-generator.js"],"names":["fs","require","btoa","glob","getFiles","type","files","recursive","globExpr","sync","filter","path","RegExp","test","forEach","fullPath","relativePath","replace","readFileSync","JSON","stringify","module","exports","generateRawFilesJs","grunt","banner","dirs","map","reduce","combined","file","rawFilesJs","writeFileSync","err","fail","warn","log","writeln","cyan"],"mappings":"AAAA;;;;;;;AAOA;;AAEA;;AACA,IAAIA,KAAKC,QAAQ,IAAR,CAAT;AACA,IAAIC,OAAOD,QAAQ,MAAR,CAAX;AACA,IAAIE,OAAOF,QAAQ,MAAR,CAAX;;AAEA,SAASG,QAAT,CAAkBC,IAAlB,EAAwB;AACtB,MAAIC,QAAQ,EAAZ;AACA,MAAIC,YAAaF,SAAS,MAA1B;AACA,MAAIG,WAAYD,YAAY,OAAZ,GAAsB,IAAtC;AACAJ,OAAKM,IAAL,CAAUJ,OAAOG,QAAjB,EACGE,MADH,CACU,UAAUC,IAAV,EAAgB;AACtB,WAAON,SAAS,OAAT,GAAmB,IAAnB,GAA0B,IAAIO,MAAJ,CAAW,QAAQP,IAAR,GAAe,GAA1B,EAA+BQ,IAA/B,CAAoCF,IAApC,CAAjC;AACD,GAHH,EAIGG,OAJH,CAIW,UAAUC,QAAV,EAAoB;AAC3B,QAAIC,eAAeD,SAASE,OAAT,CAAiB,UAAjB,EAA6B,EAA7B,CAAnB;AACAX,UAAMU,YAAN,IAAuBX,SAAS,OAAT,GAAmBH,KAAKF,GAAGkB,YAAH,CAAgBH,QAAhB,CAAL,CAAnB,GAAqDf,GAAGkB,YAAH,CAAgBH,QAAhB,EAA0B,MAA1B,CAA5E;AACD,GAPH;AAQA,SAAO,WAAWV,IAAX,GAAkB,KAAlB,GAA0Bc,KAAKC,SAAL,CAAed,KAAf,CAA1B,GAAkD,IAAzD;AACD;;AAEDe,OAAOC,OAAP,GAAiB,SAASC,kBAAT,CAA4BC,KAA5B,EAAmCC,MAAnC,EAA2C;AAC1D,MAAI,CAACA,MAAL,EAAa;AACXA,aAAS,EAAT;AACD;AACD,MAAIC,OAAO,CAAC,IAAD,EAAO,MAAP,EAAe,OAAf,CAAX;AACA,MAAIpB,QAAQmB,SAASC,KAAKC,GAAL,CAASvB,QAAT,EAAmBwB,MAAnB,CAA0B,UAAUC,QAAV,EAAoBC,IAApB,EAA0B;AACvE,WAAOD,WAAWC,IAAlB;AACD,GAFoB,EAElB,EAFkB,CAArB;AAGA,MAAIC,aAAa,iCAAjB;AACA,MAAI;AACF/B,OAAGgC,aAAH,CAAiBD,UAAjB,EAA6BzB,KAA7B;AACD,GAFD,CAGA,OAAO2B,GAAP,EAAY;AACVT,UAAMU,IAAN,CAAWC,IAAX,CAAgBF,GAAhB;AACD;AACDT,QAAMY,GAAN,CAAUC,OAAV,CAAkB,UAAUN,WAAWO,IAArB,GAA4B,WAA9C;AACD,CAhBD","file":"bs-raw-files-generator.js","sourcesContent":["/*!\n * Bootstrap Grunt task for generating raw-files.min.js for the Customizer\n * http://getbootstrap.com\n * Copyright 2014 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n */\n\n/* global btoa: true */\n\n'use strict';\nvar fs = require('fs');\nvar btoa = require('btoa');\nvar glob = require('glob');\n\nfunction getFiles(type) {\n  var files = {};\n  var recursive = (type === 'less');\n  var globExpr = (recursive ? '/**/*' : '/*');\n  glob.sync(type + globExpr)\n    .filter(function (path) {\n      return type === 'fonts' ? true : new RegExp('\\\\.' + type + '$').test(path);\n    })\n    .forEach(function (fullPath) {\n      var relativePath = fullPath.replace(/^[^/]+\\//, '');\n      files[relativePath] = (type === 'fonts' ? btoa(fs.readFileSync(fullPath)) : fs.readFileSync(fullPath, 'utf8'));\n    });\n  return 'var __' + type + ' = ' + JSON.stringify(files) + '\\n';\n}\n\nmodule.exports = function generateRawFilesJs(grunt, banner) {\n  if (!banner) {\n    banner = '';\n  }\n  var dirs = ['js', 'less', 'fonts'];\n  var files = banner + dirs.map(getFiles).reduce(function (combined, file) {\n    return combined + file;\n  }, '');\n  var rawFilesJs = 'docs/assets/js/raw-files.min.js';\n  try {\n    fs.writeFileSync(rawFilesJs, files);\n  }\n  catch (err) {\n    grunt.fail.warn(err);\n  }\n  grunt.log.writeln('File ' + rawFilesJs.cyan + ' created.');\n};\n"]}