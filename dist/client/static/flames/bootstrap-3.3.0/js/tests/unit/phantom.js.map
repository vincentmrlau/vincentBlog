{"version":3,"sources":["../../../../../../../../client/static/flames/bootstrap-3.3.0/js/tests/unit/phantom.js"],"names":["QUnit","config","reorder","autorun","sendMessage","args","slice","call","arguments","alert","JSON","stringify","log","obj","message","actual","expected","result","jsDump","parse","source","testStart","name","testDone","failed","passed","total","duration","moduleStart","moduleDone","console","begin","done","runtime"],"mappings":";;AAAA;;;;;;;;AAQC,aAAY;AACX;;AAEA;;AACAA,QAAMC,MAAN,CAAaC,OAAb,GAAuB,KAAvB;AACA;AACAF,QAAMC,MAAN,CAAaE,OAAb,GAAuB,KAAvB;;AAEA;AACA,WAASC,WAAT,GAAuB;AACrB,QAAIC,OAAO,GAAGC,KAAH,CAASC,IAAT,CAAcC,SAAd,CAAX;AACAC,UAAMC,KAAKC,SAAL,CAAeN,IAAf,CAAN;AACD;;AAED;AACAL,QAAMY,GAAN,CAAU,UAAUC,GAAV,EAAe;AACvB;AACA,QAAIA,IAAIC,OAAJ,KAAgB,sCAApB,EAA4D;AAAE;AAAQ;;AAEtE;AACA,QAAIC,MAAJ;AACA,QAAIC,QAAJ;AACA,QAAI,CAACH,IAAII,MAAT,EAAiB;AACf;AACA;AACAF,eAASf,MAAMkB,MAAN,CAAaC,KAAb,CAAmBN,IAAIE,MAAvB,CAAT;AACAC,iBAAWhB,MAAMkB,MAAN,CAAaC,KAAb,CAAmBN,IAAIG,QAAvB,CAAX;AACD;AACD;AACAZ,gBAAY,WAAZ,EAAyBS,IAAII,MAA7B,EAAqCF,MAArC,EAA6CC,QAA7C,EAAuDH,IAAIC,OAA3D,EAAoED,IAAIO,MAAxE;AACD,GAfD;;AAiBApB,QAAMqB,SAAN,CAAgB,UAAUR,GAAV,EAAe;AAC7BT,gBAAY,iBAAZ,EAA+BS,IAAIS,IAAnC;AACD,GAFD;;AAIAtB,QAAMuB,QAAN,CAAe,UAAUV,GAAV,EAAe;AAC5BT,gBAAY,gBAAZ,EAA8BS,IAAIS,IAAlC,EAAwCT,IAAIW,MAA5C,EAAoDX,IAAIY,MAAxD,EAAgEZ,IAAIa,KAApE,EAA2Eb,IAAIc,QAA/E;AACD,GAFD;;AAIA3B,QAAM4B,WAAN,CAAkB,UAAUf,GAAV,EAAe;AAC/BT,gBAAY,mBAAZ,EAAiCS,IAAIS,IAArC;AACD,GAFD;;AAIAtB,QAAM6B,UAAN,CAAiB,UAAUhB,GAAV,EAAe;AAC9B,QAAIA,IAAIW,MAAJ,KAAe,CAAnB,EAAsB;AACpBM,cAAQlB,GAAR,CAAY,mCAAmCC,IAAIS,IAAvC,GAA8C,UAA1D;AACD,KAFD,MAEO;AACLQ,cAAQlB,GAAR,CAAY,YAAYC,IAAIW,MAAhB,GAAyB,oBAAzB,GAAgDX,IAAIS,IAApD,GAA2D,UAAvE;AACD;AACDlB,gBAAY,kBAAZ,EAAgCS,IAAIS,IAApC,EAA0CT,IAAIW,MAA9C,EAAsDX,IAAIY,MAA1D,EAAkEZ,IAAIa,KAAtE;AACD,GAPD;;AASA1B,QAAM+B,KAAN,CAAY,YAAY;AACtB3B,gBAAY,aAAZ;AACA0B,YAAQlB,GAAR,CAAY,yBAAZ;AACAkB,YAAQlB,GAAR,CAAY,oDAAZ;AACD,GAJD;;AAMAZ,QAAMgC,IAAN,CAAW,UAAUnB,GAAV,EAAe;AACxBT,gBAAY,YAAZ,EAA0BS,IAAIW,MAA9B,EAAsCX,IAAIY,MAA1C,EAAkDZ,IAAIa,KAAtD,EAA6Db,IAAIoB,OAAjE;AACD,GAFD;AAID,CA/DA,GAAD","file":"phantom.js","sourcesContent":["/*\n * grunt-contrib-qunit\n * http://gruntjs.com/\n *\n * Copyright (c) 2014 \"Cowboy\" Ben Alman, contributors\n * Licensed under the MIT license.\n */\n\n(function () {\n  'use strict';\n\n  // Don't re-order tests.\n  QUnit.config.reorder = false\n  // Run tests serially, not in parallel.\n  QUnit.config.autorun = false\n\n  // Send messages to the parent PhantomJS process via alert! Good times!!\n  function sendMessage() {\n    var args = [].slice.call(arguments)\n    alert(JSON.stringify(args))\n  }\n\n  // These methods connect QUnit to PhantomJS.\n  QUnit.log(function (obj) {\n    // What is this I donâ€™t even\n    if (obj.message === '[object Object], undefined:undefined') { return }\n\n    // Parse some stuff before sending it.\n    var actual\n    var expected\n    if (!obj.result) {\n      // Dumping large objects can be very slow, and the dump isn't used for\n      // passing tests, so only dump if the test failed.\n      actual = QUnit.jsDump.parse(obj.actual)\n      expected = QUnit.jsDump.parse(obj.expected)\n    }\n    // Send it.\n    sendMessage('qunit.log', obj.result, actual, expected, obj.message, obj.source)\n  })\n\n  QUnit.testStart(function (obj) {\n    sendMessage('qunit.testStart', obj.name)\n  })\n\n  QUnit.testDone(function (obj) {\n    sendMessage('qunit.testDone', obj.name, obj.failed, obj.passed, obj.total, obj.duration)\n  })\n\n  QUnit.moduleStart(function (obj) {\n    sendMessage('qunit.moduleStart', obj.name)\n  })\n\n  QUnit.moduleDone(function (obj) {\n    if (obj.failed === 0) {\n      console.log('\\r\\u2714 All tests passed in \"' + obj.name + '\" module')\n    } else {\n      console.log('\\u2716 ' + obj.failed + ' tests failed in \"' + obj.name + '\" module')\n    }\n    sendMessage('qunit.moduleDone', obj.name, obj.failed, obj.passed, obj.total)\n  })\n\n  QUnit.begin(function () {\n    sendMessage('qunit.begin')\n    console.log('\\n\\nStarting test suite')\n    console.log('================================================\\n')\n  })\n\n  QUnit.done(function (obj) {\n    sendMessage('qunit.done', obj.failed, obj.passed, obj.total, obj.runtime)\n  })\n\n}())\n"]}